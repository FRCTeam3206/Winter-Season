/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
  //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a
    //// joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

 // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS 
 public Joystick logitechAttack3;
  
public Joystick logitechExtreme3D;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Command autonomousCommand;
    //SendableChooser<Command> chooser;
    SendableChooser<Command> autoChooser;
    String chosen;


public OI() {

  logitechAttack3 = new Joystick(0); //Left Joystick
  
  logitechExtreme3D = new Joystick(1); //Right Joystick

  //Chooser
  autoChooser = new SendableChooser<Command>();
  autoChooser.setDefaultOption("Initiation Line", new AutoDrive(-1, 3));
  autoChooser.addOption("Left Shot", new LeftShot());
  autoChooser.addOption("Right Shot", new RightShot());
  autoChooser.addOption("Direct Shot", new DirectShot());
  //autoChooser.addOption(name, object);-----------Add more objects here for more autonomous options
  SmartDashboard.putData("Auto mode", autoChooser);

}


public Joystick getLogitechAttack3() {
  return logitechAttack3;
}

public Joystick getLogitechExtreme3D() {
  return logitechExtreme3D;
}


}

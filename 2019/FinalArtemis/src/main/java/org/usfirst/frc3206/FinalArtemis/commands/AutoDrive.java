// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3206.FinalArtemis.commands;

import edu.wpi.first.wpilibj.command.Command;
//import edu.wpi.first.wpilibj.command.PIDCommand;
import edu.wpi.first.wpilibj.smartdashboard.*;

import org.usfirst.frc3206.FinalArtemis.Robot;

public class AutoDrive extends Command {

double CurrentEncoderLeft = Robot.driveTrain.getLeftDistance();
double CurrentEncoderRight = Robot.driveTrain.getRightDistance();
double DistanceMovedLeft = 0;
double DistanceMovedRight = 0;
double DistanceMoved = 0;
double DesiredDistance;
String desiredDirection;
double Starttime = 0;
double Runtime = 0;
//double error = 0;

    public AutoDrive(String Direction, double Distance) {
        /*
        super("AutoDrive", 1.0, 0.0, 0.0, 0.02);
        getPIDController().setContinuous(false);
        getPIDController().setAbsoluteTolerance(0.2);
        */
        DesiredDistance = Distance;
        desiredDirection = Direction;
        requires(Robot.driveTrain);
    }

   

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    DistanceMovedLeft = 0;
    DistanceMovedRight = 0;
    Starttime = 0;
    AutoDrive.this.setTimeout(DesiredDistance * 1.5);
    Robot.driveTrain.Brake();
    }
    /*
    @Override
    protected double returnPIDInput() {
       return rightEncoder.getDistancePerPulse();
    }

    @Override
    protected void usePIDOutput(double output) {
        Robot.driveTrain.Drive(output);
    }
    */

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        
        if (AutoDrive.this.isTimedOut()) {
            Robot.driveTrain.stop();
            end();

          SmartDashboard.putNumber("Left Encoder", Robot.driveTrain.getLeftDistance());
          SmartDashboard.putNumber("Right Encoder", Robot.driveTrain.getRightDistance());
          SmartDashboard.putNumber("Runtime", AutoDrive.this.timeSinceInitialized());
        } else {
          //error = Math.abs(Robot.driveTrain.getLeftDistance() - Robot.driveTrain.getRightDistance());//debug only
          /*
          DistanceMoved = Robot.driveTrain.getLeftDistance() + Robot.driveTrain.getRightDistance();
          Robot.driveTrain.getLeftDistance();
          Robot.driveTrain.getRightDistance();
            */
          if (desiredDirection == "forward") {
            DistanceMoved = Robot.driveTrain.getLeftDistance() + Robot.driveTrain.getRightDistance();
            Robot.driveTrain.getLeftDistance();
            Robot.driveTrain.getRightDistance();

            Robot.driveTrain.Drive(.5);
            //SmartDashboard.putNumber("Error", error);
            SmartDashboard.putNumber("Left Encoder", Robot.driveTrain.getLeftDistance());
            SmartDashboard.putNumber("Right Encoder", Robot.driveTrain.getRightDistance());
            SmartDashboard.putNumber("Runtime", AutoDrive.this.timeSinceInitialized());
          } else if (desiredDirection == "reverse") {
            DistanceMoved = Robot.driveTrain.getLeftDistance() + Robot.driveTrain.getRightDistance();
            Robot.driveTrain.getLeftDistance();
            Robot.driveTrain.getRightDistance();

            Robot.driveTrain.Drive(-.5);
            //SmartDashboard.putNumber("Error", error);
            SmartDashboard.putNumber("Left Encoder", Robot.driveTrain.getLeftDistance());
            SmartDashboard.putNumber("Right Encoder", Robot.driveTrain.getRightDistance());
            SmartDashboard.putNumber("Runtime", AutoDrive.this.timeSinceInitialized());
          } else {
            end();
          }
        }
    }
          
    


    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (DistanceMoved >= DesiredDistance) {
        //if (DistanceMovedLeft >= DesiredDistance) { //replacement in case left doesn't work well
        	return true;
        }
        else {
        	return false;
        }
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.stop();
        SmartDashboard.putNumber("Left Encoder", Robot.driveTrain.getLeftDistance());
        SmartDashboard.putNumber("Right Encoder", Robot.driveTrain.getRightDistance());
        Robot.driveTrain.Coast();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3206.FinalArtemis;

import org.usfirst.frc3206.FinalArtemis.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
//import org.usfirst.frc3206.FinalArtemis.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    /*
    public JoystickButton hatchDeployButton;
    public JoystickButton lowSpeedButton;
    public JoystickButton highSpeedButton;
    public JoystickButton compressorOnButton;
    public JoystickButton compressorOffButton;

    public JoystickButton intakeBallButton;
    public JoystickButton extakeBallButton;
    public JoystickButton elevatorUpButton;
    public JoystickButton elevatorDownButton;
    public JoystickButton climbDeployButton;
    public JoystickButton climbRetractButton;
    public JoystickButton climbClampButton;
    */
    public Joystick rightStick;
    public Joystick leftStick;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightStick = new Joystick(1);
        /*
        climbRetractButton = new JoystickButton(rightStick, 10);
        climbRetractButton.whileHeld(new ClimbRetract());
        climbDeployButton = new JoystickButton(rightStick, 11);
        climbDeployButton.whileHeld(new ClimbDeploy());
        climbClampButton = new JoystickButton(rightStick, 9);
        climbClampButton.whenPressed(new ClimbClamp());
        //
        elevatorDownButton = new JoystickButton(rightStick, 4);
        elevatorDownButton.whenPressed(new ElevatorDown());
        elevatorUpButton = new JoystickButton(rightStick, 6);
        elevatorUpButton.whileHeld(new ElevatorUp());
        extakeBallButton = new JoystickButton(rightStick, 3);
        extakeBallButton.whileHeld(new ExtakeBall());
        intakeBallButton = new JoystickButton(rightStick, 5);
        intakeBallButton.whileHeld(new IntakeBall());
        */

        leftStick = new Joystick(0);
        /*
        compressorOffButton = new JoystickButton(leftStick, 5);
        compressorOffButton.cancelWhenPressed(new CompressorOn());
        compressorOnButton = new JoystickButton(leftStick, 4);
        compressorOnButton.whenPressed(new CompressorOn());
        highSpeedButton = new JoystickButton(leftStick, 3);
        highSpeedButton.whenPressed(new HighSpeed());
        lowSpeedButton = new JoystickButton(leftStick, 2);
        lowSpeedButton.whenPressed(new LowSpeed());
        hatchDeployButton = new JoystickButton(leftStick, 1);
        hatchDeployButton.whileHeld(new HatchDeploy());
        */

        // SmartDashboard Buttons
        SmartDashboard.putData("Default Drive Straight", new AutoDrive("forward", 5));
        SmartDashboard.putData("AutoDrive: HalfDrive", new AutoDrive("forward", 5));
        SmartDashboard.putData("AutoTurn", new AutoTurn("left", 90));
        SmartDashboard.putData("Camera", new Camera());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftStick() {
        return leftStick;
    }

    public Joystick getRightStick() {
        return rightStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


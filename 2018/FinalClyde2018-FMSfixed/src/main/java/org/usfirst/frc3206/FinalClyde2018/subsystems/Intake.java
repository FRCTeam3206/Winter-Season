// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3206.FinalClyde2018.subsystems;

import org.usfirst.frc3206.FinalClyde2018.RobotMap;
import org.usfirst.frc3206.FinalClyde2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;


// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends Subsystem {

	double IntakeDuration = 1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final VictorSP m_intakeleft = RobotMap.intakeLeftIntake;
    private final VictorSP m_intakeright = RobotMap.intakeRightIntake;
    private final DifferentialDrive m_intakeDrive = RobotMap.IntakeDifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new TeleopIntake());
    }
    
    //delete if not used in teleop
    public void IntakeDrive(double Speed) {	
    	
    	m_intakeDrive.tankDrive(Speed, Speed);
    }
    
    public void CubeIn() {
    	
    	m_intakeDrive.tankDrive(-RobotMap.IntakeAutoSpeed, -RobotMap.IntakeAutoSpeed);
    }
    
    public void CubeOut() {
    	
    	m_intakeDrive.tankDrive(RobotMap.IntakeAutoSpeed, RobotMap.IntakeAutoSpeed);
    }
    
    public void stop() {
    	
    	m_intakeDrive.tankDrive(0, 0);
    }
    
    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}


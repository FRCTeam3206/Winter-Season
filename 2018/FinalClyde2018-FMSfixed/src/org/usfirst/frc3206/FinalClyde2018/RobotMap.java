// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3206.FinalClyde2018;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static VictorSP driveTrainLeftMotors;
    public static VictorSP driveTrainRightMotors;
    public static DifferentialDrive driveTrainDifferentialDrive;
    public static AnalogInput driveTrainAnalogEncoder;
    public static VictorSP intakeLeftIntake;
    public static VictorSP intakeRightIntake;
    public static Spark elevatorElevatorMotor;
    public static VictorSP climbClimbMotor;
    public static DifferentialDrive IntakeDifferentialDrive;
    
	

    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //public static  ADXRS450_Gyro Gyro = new ADXRS450_Gyro();
    public static AnalogInput Encoder = RobotMap.driveTrainAnalogEncoder;

    
    public static double Start2Switch = 168;
    public static double Turn2Switch = 24;
    public static double Start2Scale = 316;
    public static double Turn2Sccale = 24;
    public static double AutoLine = 125;
    public static double Middle2SwitchLeft = 141.46;
    public static double Middle2SwitchRight = 141.46;
    
    public static double DriveSpeed = .6;
    public static double TurnSpeed = .49;
    public static double SwitchTime = .8;
    public static double ScaleTime = 1.7;
    public static double IntakeTime = 3;
    
    public static double ElevatorupSpeed = 1;
    public static double ElevatordownSpeed = .4;
    public static double IntakeSpeed = .9;
    public static double IntakeAutoSpeed = .9;
    public static double ClimbSpeed = 1;
    
    public static double timePerAngle = .01;
    public static double timePerInch = .02899987;
    
	//The next two lines create a variable and then get the field colors and store them in that variable
	public static String gameData = "   ";
// = "LLL"; //hard coded for now
    //gets three digit code telling which side of the switches and scales are ours, in order close to far
		
	public static int Location = 3;//hard coded for now
	//public static int Location = DriverStation.getInstance().getLocation();

	public static Command autoCommand;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftMotors = new VictorSP(0);
        LiveWindow.add(driveTrainLeftMotors);
        driveTrainLeftMotors.setInverted(false);
        driveTrainRightMotors = new VictorSP(1);
        LiveWindow.add(driveTrainRightMotors);
        driveTrainRightMotors.setInverted(false);
        driveTrainDifferentialDrive = new DifferentialDrive(driveTrainLeftMotors, driveTrainRightMotors);
        LiveWindow.add(driveTrainDifferentialDrive);
        driveTrainDifferentialDrive.setSafetyEnabled(true);
        driveTrainDifferentialDrive.setExpiration(0.1);
        driveTrainDifferentialDrive.setMaxOutput(1.0);

        driveTrainAnalogEncoder = new AnalogInput(3);
        LiveWindow.add(driveTrainAnalogEncoder);
        
        intakeLeftIntake = new VictorSP(3);
        LiveWindow.add(intakeLeftIntake);
        intakeLeftIntake.setInverted(false);
        intakeRightIntake = new VictorSP(4);
        LiveWindow.add(intakeRightIntake);
        intakeRightIntake.setInverted(false);
        IntakeDifferentialDrive = new DifferentialDrive(intakeLeftIntake, intakeRightIntake);
        LiveWindow.add(IntakeDifferentialDrive);
        elevatorElevatorMotor = new Spark(2);
        LiveWindow.add(elevatorElevatorMotor);
        elevatorElevatorMotor.setInverted(false);
        climbClimbMotor = new VictorSP(5);
        //LiveWindow.addActuator("Climb", "ClimbMotor", (VictorSP) climbClimbMotor);//example case in case I need to change it back
        LiveWindow.add(climbClimbMotor);
        climbClimbMotor.setInverted(false);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


       
        
        
    }
}

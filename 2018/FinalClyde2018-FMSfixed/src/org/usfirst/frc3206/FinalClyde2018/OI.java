// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3206.FinalClyde2018;

import org.usfirst.frc3206.FinalClyde2018.commands.*;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3206.FinalClyde2018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton intakeButton;
    public JoystickButton outtakeButton;
    public JoystickButton halfouttakeButton;
    public Joystick logitechAttack3;
    
    public JoystickButton elevatorUpButton;
    public JoystickButton elevatorDownButton;
    public JoystickButton climbUpButton;
    public JoystickButton climbDownButton;
    public Joystick logitechExtreme3D;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Command autonomousCommand;
    //SendableChooser<Command> chooser;
    SendableChooser<String> newChooser;
       
    String chosen;
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
        logitechExtreme3D = new Joystick(1);
        
        climbDownButton = new JoystickButton(logitechExtreme3D, 5);
        
        climbUpButton = new JoystickButton(logitechExtreme3D, 6);
        
        elevatorDownButton = new JoystickButton(logitechExtreme3D, 3);
        
        elevatorUpButton = new JoystickButton(logitechExtreme3D, 1);
        
        logitechAttack3 = new Joystick(0);
        
        outtakeButton = new JoystickButton(logitechAttack3, 5);
        
        halfouttakeButton = new JoystickButton(logitechAttack3, 4);
        
        intakeButton = new JoystickButton(logitechAttack3, 1);
        
        
        
    	SmartDashboard.putString("Game Data", RobotMap.gameData);
     
        //Teleop Commands
        //SmartDashboard.putData("DriveWithJoysticks", new DriveWithJoysticks());
        //SmartDashboard.putData("Camera", new Camera());

        
        //Autonomous Commands
        /*
        SmartDashboard.putData("Turn Left 90", new Turn("left", 90));
        SmartDashboard.putData("TimedTurn Left 90", new TimedTurn(90, "left"));
        SmartDashboard.putData("TimedTurn Left 45", new TimedTurn(45, "left"));
        SmartDashboard.putData("TimedTurn right 90", new TimedTurn(90, "right"));
        SmartDashboard.putData("TimedDrive", new TimedDrive(70));
        SmartDashboard.putData("TimedDrive 15", new TimedDrive(15));
        /*SmartDashboard.putData("Turn Right 90", new Turn("right", 90));
        SmartDashboard.putData("Turn Left 45", new Turn("left", 45));
        SmartDashboard.putData("Turn Right 45", new Turn("right", 45));
        */
        SmartDashboard.putData("TimedTurn Left 90", new TimedTurn(90, "left"));
        SmartDashboard.putData("Intake Auto", new IntakeIn());
        
        //Elevator Commands
        /*
        SmartDashboard.putData("Lift Up to scale", new Lift("up", RobotMap.ScaleTime));
        SmartDashboard.putData("Lift Down from scale", new Lift("down", RobotMap.ScaleTime));
        SmartDashboard.putData("Lift Up to switch", new Lift("up", RobotMap.SwitchTime));
        SmartDashboard.putData("Lift Down from switch", new Lift("down", RobotMap.SwitchTime));
        */
        
        //Intake Commands
        
        //SmartDashboard.putData("Intake Cube", new Cube("in"));
        SmartDashboard.putData("Eject Cube", new Cube("out"));
        SmartDashboard.putData("Extake", new Extake());
        
        
        //Drive Commands
       //SmartDashboard.putData("MoveNoLoop(Start2Switch)", new MoveNoLoop(RobotMap.Start2Switch));
        
        //Command Groups
       /*
        SmartDashboard.putData("RightStart", new RightStart());
        SmartDashboard.putData("MiddleStart", new MiddleStart());
        SmartDashboard.putData("LeftStart", new LeftStart());
        */
       //SmartDashboard.putData("TimedCenter", new TimedCenter());

        //Chooser
        /*
        chooser = new SendableChooser<Command>();
        chooser.addDefault("AutoLine", new AutoLine());
        chooser.addObject("Right Start", new RightStart());
        chooser.addObject("Left Start", new LeftStart());
        chooser.addObject("Middle Start", new MiddleStart());
        chooser.addObject("Timed Right Start", new TimedRight());
        chooser.addObject("Timed Left Start", new TimedLeft());
        chooser.addObject("Timed Center Start", new TimedCenter());
        SmartDashboard.putData("Auto mode", chooser);
	*/
        newChooser = new SendableChooser<String>();
        newChooser.addDefault("AutoLine", "AutoLine");
        newChooser.addObject("Timed Right Start", "Timed Right Start");
        newChooser.addObject("Timed Left Start", "Timed Left Start");
        newChooser.addObject("Timed Center Start","Timed Center Start");
        SmartDashboard.putData("Auto mode", newChooser);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLogitechAttack3() {
        return logitechAttack3;
    }

    public Joystick getLogitechExtreme3D() {
        return logitechExtreme3D;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}


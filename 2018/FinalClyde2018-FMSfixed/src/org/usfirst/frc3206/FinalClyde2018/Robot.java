// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3206.FinalClyde2018;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3206.FinalClyde2018.commands.*;
import org.usfirst.frc3206.FinalClyde2018.subsystems.*;

import edu.wpi.first.wpilibj.DriverStation;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Timer gameDataTimer = new Timer();
    double gameDataTimeOut = 3;
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEC+LARATIONS
    public static DriveTrain driveTrain;
    public static Intake intake;
    public static Elevator elevator;
    public static Climb climb;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        intake = new Intake();
        elevator = new Elevator();
        climb = new Climb();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
    	//The next two lines create a variable and then get the field colors and store them in that variable
    	/*
    	RobotMap.gameData = DriverStation.getInstance().getGameSpecificMessage();//gets three digit code telling which side of the switches and scales are ours, in order close to far    	
    	SmartDashboard.putString("Game Data", RobotMap.gameData);
    	Scheduler.getInstance().run();
      */  
    }

    @Override
    public void autonomousInit() {    	
    	gameDataTimer.reset();
    	gameDataTimer.start();
    	
    	while(true) {
    		if (Double.compare(gameDataTimer.get(), gameDataTimeOut) <= 0 && RobotMap.gameData == null) {
    			Timer.delay(0.02);
    		}else {
    			break;
    		}
    		RobotMap.gameData = DriverStation.getInstance().getGameSpecificMessage();
    		SmartDashboard.putString("Game Data", RobotMap.gameData);
    		
    		RobotMap.gameData = ("NULL".equalsIgnoreCase(RobotMap.gameData)) ? null : RobotMap.gameData;
    	}
    	/*
    	try {
    		RobotMap.gameData = DriverStation.getInstance().getGameSpecificMessage();
    		SmartDashboard.putString("Game Data", RobotMap.gameData);
    	} catch(Exception e) {
    		System.out.println("-------------------------Error Game Data Null");
    	}
    	*/
    	/*if (RobotMap.gameData.charAt(0) == 'R') {
    		System.out.println("-------------------------"+RobotMap.gameData.charAt(0));
    		new TimedCenterRight();
    	}
    	*/
    	// schedule the autonomous command (example)
       // if (Robot.oi.autonomousCommand != null) {
    	/*
    	Robot.oi.autonomousCommand = Robot.oi.chooser.getSelected();   
    	Robot.oi.autonomousCommand.start();
        System.out.println("---------------------auto case started");
        //}
        */
    	Robot.oi.chosen = Robot.oi.newChooser.getSelected();
    	
    	if(RobotMap.gameData == null) {
    		RobotMap.autoCommand = new AutoLine();
    		
    	} else if(RobotMap.gameData.charAt(0) == 'L' && Robot.oi.chosen == "Timed Left Start") {
        	RobotMap.autoCommand = new StraightSwitch();
        	
        } else if(RobotMap.gameData.charAt(0) == 'L' && Robot.oi.chosen == "Timed Center Start") {
        	RobotMap.autoCommand = new TimedCenterLeft();
        	
        } else if(RobotMap.gameData.charAt(0) == 'L' && Robot.oi.chosen == "Timed Right Start") {
        	RobotMap.autoCommand = new AutoLine();
        	
        } else if(RobotMap.gameData.charAt(0) == 'R' && Robot.oi.chosen == "Timed Left Start") {
        	RobotMap.autoCommand = new AutoLine();
        	
        } else if(RobotMap.gameData.charAt(0) == 'R' && Robot.oi.chosen == "Timed Center Start") {
        	RobotMap.autoCommand = new TimedCenterRight();
        	
        } else if(RobotMap.gameData.charAt(0) == 'R' && Robot.oi.chosen == "Timed Right Start") {
        	RobotMap.autoCommand = new StraightSwitch();
        	
        } else if(Robot.oi.chosen == "AutoLine") {
        	RobotMap.autoCommand = new AutoLine();
        	
        } else {
        	RobotMap.autoCommand = new AutoLine();
        }
    	
    	Robot.oi.autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
    	Scheduler.getInstance().run();

    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (Robot.oi.autonomousCommand != null) Robot.oi.autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();        
        
        //Intake (in-Attack3 button 1, out-Attack3 button 4, half out-Attack3 button 5)
        if (Robot.oi.intakeButton.get()) {//intake
        	Robot.intake.IntakeDrive(-RobotMap.IntakeSpeed);
        }
        else if (Robot.oi.outtakeButton.get()) {//outtake
        	Robot.intake.IntakeDrive(RobotMap.IntakeSpeed);
        	
        } else if(Robot.oi.halfouttakeButton.get()) {//half outtake speed
        	Robot.intake.IntakeDrive(RobotMap.IntakeSpeed * .5);
        	
        }
        else {
        	Robot.intake.stop();
        }
        
        /*
        //we should test this with CubeIn and CubeOut instead of IntakeDrive sometime
        if (Robot.oi.intakeButton.get()) {
        	Robot.intake.CubeIn();
        }
        else if (Robot.oi.outtakeButton.get()) {
        	Robot.intake.CubeOut();
        }
        else {
        	Robot.intake.stop();
        }
        */ 
        
        //Elevator (down-Extreme3D button 3, up-Extreme3D button 1)
        if (Robot.oi.elevatorDownButton.get()) {
        	Robot.elevator.Lift(RobotMap.ElevatordownSpeed);
        }
        else if (Robot.oi.elevatorUpButton.get()) {
        	Robot.elevator.Lift(-RobotMap.ElevatorupSpeed);
        }
        else {
        	Robot.elevator.stop();
        }
        
        //Climb (up-Extreme3D button 6, down-Extreme 3D button 5)
        if (Robot.oi.climbUpButton.get()) {
        	Robot.climb.ClimbUp();
        	
        } else if(Robot.oi.climbDownButton.get()) {
        	Robot.climb.ClimbDown();
        	
        }
        else {
        	Robot.climb.stop();
        }
       
    }
}
